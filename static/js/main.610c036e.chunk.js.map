{"version":3,"sources":["components/layouts/Header.js","components/layouts/Footer.js","components/contents/Education.js","components/contents/Detail.js","components/contents/Highlight.js","components/contents/Project.js","components/contents/Experience.js","components/contents/Content.js","components/layouts/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","AppHeader","react_default","a","createElement","row","col","span","this","props","contacts","name","Component","Footer","AppFooter","Educations","id","context","intl","formatMessage","t","contextTypes","PropTypes","object","isRequired","Detail","_this","details","map","detail","i","key","concat","description","renderDetailLink","link","renderDetails","Highlight","highlights","highlight","contents_Detail","Projects","projects","project","title","contents_Highlight","Experiences","experiences","experience","employer","Content","AppContent","myData","educations","length","Education","otherProjects","Project","professionalExperiences","Experience","renderEducationSection","renderExperienceSection","renderProjectSection","AppLayout","state","getResume","prevProps","prevState","locale","_this2","url","fetch","then","response","json","data","setState","layout","layouts_Header","contents_Content","layouts_Footer","renderLayout","addLocaleData","Object","toConsumableArray","locale_en","locale_zh","messages","zh","messages_zh","en","messages_en","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeLocale","e","localeValue","target","value","language","index_es","es_radio","Group","defaultValue","undefined","onChange","Button","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.610c036e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport { Layout, Row, Col } from 'antd';\n\nconst { Header } = Layout;\n\nclass AppHeader extends Component {\n  static propTypes = {\n    contacts: PropTypes.shape({\n      name: PropTypes.string,\n      email: PropTypes.string,\n      profiles: PropTypes.arrayOf(PropTypes.shape({\n        type: PropTypes.string,\n        url: PropTypes.string,\n      })),\n    }).isRequired,\n  }\n\n  render() {\n    return (\n      <Header>\n        <Row>\n          <Col span={12}>\n            <h1> {this.props.contacts.name} </h1>\n          </Col>\n        </Row>\n      </Header>\n    );\n  }\n}\n\nexport default AppHeader;","import React, { Component } from 'react';\nimport { Layout } from 'antd';\n\nconst { Footer } = Layout;\n\nclass AppFooter extends Component {\n  render() {\n    return (\n      <Footer>Footer</Footer>\n    );\n  }\n}\n\nexport default AppFooter;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nclass Educations extends Component {\n  static propTypes = {\n    educations: PropTypes.array.isRequired,\n  }\n  t(id) {\n    return this.context.intl.formatMessage({id: id});\n  }\n  render() {\n    return (\n      <div>\n        <h2>{this.t('education.header')}</h2>\n        \n      </div>\n    );\n  }\n}\nEducations.contextTypes ={ intl: PropTypes.object.isRequired };\n\nexport default Educations;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nclass Detail extends Component {\n  static propTypes = {\n    details: PropTypes.array,\n  }\n\n  renderDetails() {\n    if (!this.props.details) {\n      return null;\n    }\n\n    return this.props.details.map((detail, i) => {\n      return (\n        <ul key={`detail-${i}`}>\n          <li>{detail.description}</li>\n          {this.renderDetailLink(detail.link)}\n        </ul>\n      );\n    });\n  }\n\n  renderDetailLink() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderDetails()}\n      </div>\n    );\n  }\n}\n\nexport default Detail;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport Detail from './Detail'\n\nclass Highlight extends Component {\n  static propTypes = {\n    highlights: PropTypes.array.isRequired,\n  }\n\n  render() {\n    return (\n      <div>\n        {\n          this.props.highlights.map((highlight, i) => (\n            <div key={`highlight-${i}`}>\n              <h4>{highlight.description}</h4>\n              <Detail details={highlight.details} />\n            </div>\n          ))\n        }\n      </div>\n    );\n  }\n}\n\nexport default Highlight;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport Highlight from './Highlight'\n\nclass Projects extends Component {\n  static propTypes = {\n    projects: PropTypes.array.isRequired,\n  }\n\n  t(id) {\n    return this.context.intl.formatMessage({id: id});\n  }\n\n  render() {\n    return (\n      <div>\n      <h2>{this.t('project.header')}</h2>\n        {\n          this.props.projects.map((project, i) => (\n            <div key={`project-${i}`}>\n              <h3>{project.name} | {project.title}</h3>\n              <Highlight highlights={project.highlights} />\n            </div>\n          ))\n        }\n      </div>\n    );\n  }\n}\nProjects.contextTypes ={ intl: PropTypes.object.isRequired };\n\nexport default Projects;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport Highlight from './Highlight'\n\nclass Experiences extends Component {\n  static propTypes = {\n    experiences: PropTypes.array.isRequired,\n  }\n\n  t(id) {\n    return this.context.intl.formatMessage({id: id});\n  }\n\n  render() {\n    return (\n      <div>\n      <h2>{this.t('experience.header')}</h2>\n        {\n          this.props.experiences.map((experience, i) => (\n            <div key={`experience-${i}`}>\n              <h3>{experience.title} | {experience.employer}</h3>\n              <Highlight highlights={experience.highlights} />\n            </div>\n          ))\n        }\n      </div>\n    );\n  }\n}\nExperiences.contextTypes ={ intl: PropTypes.object.isRequired };\nexport default Experiences;","import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport PropTypes from 'prop-types'\n\nimport Education from './Education'\nimport Projects from './Project'\nimport Experiences from './Experience'\n\nconst { Content } = Layout;\n\nclass AppContent extends Component {\n  static propTypes = {\n    myData: PropTypes.object.isRequired,\n  }\n\n  renderEducationSection() {\n    if (this.props.myData.educations.length < 1) {\n      return null;\n    }\n    return (<Education educations={this.props.myData.educations} />);\n  }\n\n  renderProjectSection() {\n    if (this.props.myData.otherProjects.length < 1) {\n      return null;\n    }\n    return (<Projects projects={this.props.myData.otherProjects} />);\n  }\n\n  renderExperienceSection() {\n    if (this.props.myData.professionalExperiences.length < 1) {\n      return null;\n    }\n    return (<Experiences experiences={this.props.myData.professionalExperiences} />);\n  }\n\n  render() {\n    return (\n      <Content>\n        {this.renderEducationSection()}\n        {this.renderExperienceSection()}\n        {this.renderProjectSection()}\n      </Content>\n    );\n  }\n}\n\nexport default AppContent;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport Header from './Header'\nimport Footer from './Footer'\nimport Content from '../../components/contents/Content'\nimport { Layout } from 'antd';\n\nclass AppLayout extends Component {\n  state = {\n    myData: null,\n  }\n\n  static propTypes = {\n    locale: PropTypes.string.isRequired,\n  }\n  componentDidMount() {\n    this.getResume();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.locale !== this.props.locale) {\n      this.getResume();\n    }\n  }\n\n  getResume() {\n    const url = this.context.intl.formatMessage({id: 'app.resumeURL'});\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ myData: data }));\n  }\n\n  renderLayout() {\n    if (this.state.myData !== null) {\n      return (\n        <Layout>\n          <Header contacts={this.state.myData.contacts}/>\n          <Content myData={this.state.myData}/>\n          <Footer />\n        </Layout>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderLayout()}\n      </div>\n    );\n  }\n}\n\nAppLayout.contextTypes ={ intl: PropTypes.object.isRequired };\nexport default AppLayout;\n","import React, { Component } from 'react';\nimport Layout from './components/layouts/Layout'\nimport {IntlProvider} from \"react-intl\";\nimport { addLocaleData } from \"react-intl\";\nimport locale_en from 'react-intl/locale-data/en';\nimport locale_zh from 'react-intl/locale-data/zh';\nimport messages_zh from \"./translations/zh.json\";\nimport messages_en from \"./translations/en.json\";\nimport { Radio } from 'antd';\nimport './App.css';\n\naddLocaleData([...locale_en, ...locale_zh]);\n\nconst messages = {\n  'zh': messages_zh,\n  'en': messages_en\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      language: 'en'\n    };\n  }\n\n  changeLocale = (e) => {\n    const localeValue = e.target.value;\n    this.setState({ language: localeValue });\n  }\n\n  render() {\n    return (\n      <IntlProvider locale={this.state.language} messages={messages[this.state.language]}>\n        <div>\n          <div>\n            <Radio.Group defaultValue={undefined} onChange={this.changeLocale}>\n              <Radio.Button key='en' value='en'>English</Radio.Button>\n              <Radio.Button key='zh' value='zh'>中文</Radio.Button>\n            </Radio.Group>\n          </div>\n          <Layout locale={this.state.language} />\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}