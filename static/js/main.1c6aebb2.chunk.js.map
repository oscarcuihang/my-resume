{"version":3,"sources":["components/layouts/Header.js","components/layouts/Footer.js","components/contents/Educations.js","components/contents/Projects.js","components/contents/Experiences.js","components/contents/Content.js","components/layouts/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","AppHeader","react_default","a","createElement","row","col","span","this","props","contacts","name","Component","Footer","AppFooter","Educations","Projects","Experiences","Content","AppContent","contents_Educations","educations","myData","contents_Projects","projects","otherProjects","contents_Experiences","experiences","professionalExperiences","AppLayout","state","locale","_this2","fetch","then","response","json","data","setState","layout","layouts_Header","contents_Content","layouts_Footer","renderLayout","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kOAIQA,EAAWC,IAAXD,OA+BOE,mLAhBX,OACEC,EAAAC,EAAAC,cAACL,EAAD,KACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,KAAM,IACTL,EAAAC,EAAAC,cAAA,cAAMI,KAAKC,MAAMC,SAASC,KAA1B,KACAT,EAAAC,EAAAC,cAAA,2BAEFF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,KAAM,IACTL,EAAAC,EAAAC,cAAA,mCArBYQ,aCHhBC,EAAWb,IAAXa,OAUOC,mLANX,OACEZ,EAAAC,EAAAC,cAACS,EAAD,sBAHkBD,aCYTG,mLARX,OACEb,EAAAC,EAAAC,cAAA,gCAPmBQ,aCcVI,mLARX,OACEd,EAAAC,EAAAC,cAAA,8BAPiBQ,aCcRK,mLARX,OACEf,EAAAC,EAAAC,cAAA,iCAPoBQ,aCKlBM,EAAYlB,IAAZkB,QAkBOC,mLAVX,OACEjB,EAAAC,EAAAC,cAACc,EAAD,KACEhB,EAAAC,EAAAC,cAACgB,EAAD,CAAWC,WAAYb,KAAKC,MAAMa,OAAOD,aACzCnB,EAAAC,EAAAC,cAACmB,EAAD,CAAUC,SAAUhB,KAAKC,MAAMa,OAAOG,gBACtCvB,EAAAC,EAAAC,cAACsB,EAAD,CAAaC,YAAanB,KAAKC,MAAMa,OAAOM,kCAV3BhB,aC+BViB,6MAlCbC,MAAQ,CACNR,OAAQ,KACRS,OAAQ,yFAGU,IAAAC,EAAAxB,KAElByB,MADY,8EAETC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAKM,SAAS,CAAEhB,OAAQe,6CAIxC,OAA0B,OAAtB7B,KAAKsB,MAAMR,OAEXpB,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACErC,EAAAC,EAAAC,cAACoC,EAAD,CAAQ9B,SAAUF,KAAKsB,MAAMR,OAAOZ,WACpCR,EAAAC,EAAAC,cAACqC,EAAD,CAASnB,OAAQd,KAAKsB,MAAMR,SAC5BpB,EAAAC,EAAAC,cAACsC,EAAD,OAIC,sCAIP,OACExC,EAAAC,EAAAC,cAAA,WACGI,KAAKmC,uBA7BU/B,aCOTgC,2LANX,OACE1C,EAAAC,EAAAC,cAACJ,EAAD,aAHYY,cCOEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.1c6aebb2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport { Layout, Row, Col } from 'antd';\n\nconst { Header } = Layout;\n\nclass AppHeader extends Component {\n  static propTypes = {\n    contacts: PropTypes.shape({\n      name: PropTypes.string,\n      email: PropTypes.string,\n      profiles: PropTypes.arrayOf(PropTypes.shape({\n        type: PropTypes.string,\n        url: PropTypes.string,\n      })),\n    }).isRequired,\n  }\n\n  render() {\n    return (\n      <Header>\n        <Row>\n          <Col span={12}>\n            <h1> {this.props.contacts.name} </h1>\n            <h2> ASDASDASDS </h2>\n          </Col>\n          <Col span={12}>\n            <h3>11111111111</h3>\n          </Col>\n        </Row>\n      </Header>\n    );\n  }\n}\n\nexport default AppHeader;","import React, { Component } from 'react';\nimport { Layout } from 'antd';\n\nconst { Footer } = Layout;\n\nclass AppFooter extends Component {\n  render() {\n    return (\n      <Footer>Footer</Footer>\n    );\n  }\n}\n\nexport default AppFooter;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nclass Educations extends Component {\n  static propTypes = {\n    educations: PropTypes.array.isRequired,\n  }\n\n  render() {\n    return (\n      <div>\n        Educations\n      </div>\n    );\n  }\n}\n\nexport default Educations;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nclass Projects extends Component {\n  static propTypes = {\n    projects: PropTypes.array.isRequired,\n  }\n\n  render() {\n    return (\n      <div>\n        Projects\n      </div>\n    );\n  }\n}\n\nexport default Projects;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nclass Experiences extends Component {\n  static propTypes = {\n    experiences: PropTypes.array.isRequired,\n  }\n\n  render() {\n    return (\n      <div>\n        Experiences\n      </div>\n    );\n  }\n}\n\nexport default Experiences;","import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport PropTypes from 'prop-types'\n\nimport Education from './Educations'\nimport Projects from './Projects'\nimport Experiences from './Experiences'\n\nconst { Content } = Layout;\n\nclass AppContent extends Component {\n  static propTypes = {\n    myData: PropTypes.object.isRequired,\n  }\n\n  render() {\n    return (\n      <Content>\n        <Education educations={this.props.myData.educations}/>\n        <Projects projects={this.props.myData.otherProjects}/>\n        <Experiences experiences={this.props.myData.professionalExperiences}/>\n      </Content>\n    );\n  }\n}\n\nexport default AppContent;","import React, { Component } from 'react';\nimport Header from './Header'\nimport Footer from './Footer'\nimport Content from '../../components/contents/Content'\nimport { Layout } from 'antd';\n\nclass AppLayout extends Component {\n  state = {\n    myData: null,\n    locale: 'en',\n  }\n\n  componentDidMount() {\n    const url = \"https://raw.githubusercontent.com/oscarcuihang/resume/master/resumeEN.json\";\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ myData: data }));\n  }\n\n  renderLayout() {\n    if (this.state.myData !== null) {\n      return (\n        <Layout>\n          <Header contacts={this.state.myData.contacts}/>\n          <Content myData={this.state.myData}/>\n          <Footer />\n        </Layout>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderLayout()}\n      </div>\n    );\n  }\n}\n\nexport default AppLayout;","import React, { Component } from 'react';\nimport Layout from './components/layouts/Layout'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}